ls()
x <- c(1, 2, NA, 4, NA, 5)
x
str(x)
bad <- is.na(x)
x[!bad]
y <- c("a", "b", NA, "d", NA "f")
y <- c("a", "b", NA, "d", NA, "f")
x
y
good <- complete.cases(x, y)
good
x[good]
library(datasets)
datasets()
load.packages(data)
data()
data(airquality)
library(airquality)
View(airquality)
airquality[1:6, ]
good <- complete.cases(airquality)
str(airquality)
str(good)
airquality[good, ]
good2 <- airquality[good, ]
str(good2)
str(airquality)
head(airquality)
head(good2)
x = 10
y = x
x = 15
y
rm(x)
rm(y)
mean()
mean
methods("mean")
x <- NULL
str(x)
length(x)
typeof(NA)
typeof(as.character(NA))
typeof(as.integer(NA))
is.na("NA")
is.na(NA
)
typeof(y)
y <- 10
typeof(y)
typeof(is.na)
typeof(mean)
typeof(letters)
str(letters)
str(LETTERS)
mode(letters)
is.integer(y)
is.double(y)
is.numeric(y)
1:3
1.3:3.9
6:3
typeof(:)
":"(2, 4)"
""
":"
typeof(":")
":"(2, 4)
:(2, 4)
help(":")
typeof(2:4)
is.integer(1:3)
is.integer(1.3:4.2)
is.numeric(1.3:4.2)
x <- 1:100
dim(x) = c(4, 25)
x
typeof(x)
z <- numeric(50)
z <- character(50)
z <_ logical(50)
z <- logical(50)
source('~/.active-rstudio-document')
?solve
install.packages("ggplot2")
install.packages("ggplot2")
?qplot
library(ggplot2)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ggplot2")
library(ggplot2)
install.packages("ggplot2")
source("http://bioconductor.org/biocLite.R")
biocLite()
title: "README"
x <_ c(-.5, 0,1,1,1.5)
x <- c(-.5, 0,1,1,1.5)
y <- c(0,0,2,0,0)
plot(x,y,lwd=3,frame=FALSE, type="l")
plot(x,y,lwd=3,frame=TRUE
, type="l")
plot(x,y,lwd=3,frame=TRUE
, type="l")
1.5*.75/2
pbeta(.75, 2, 1)
pbeta(.5, 1, 1)
y <- pbeta(.5, x, 1)
?pbeta
pl.beta <- function(a,b, asp = if(isLim) 1, ylim = if(isLim) c(0,1.1)) {
if(isLim <- a == 0 || b == 0 || a == Inf || b == Inf) {
eps <- 1e-10
x <- c(0, eps, (1:7)/16, 1/2+c(-eps,0,eps), (9:15)/16, 1-eps, 1)
} else {
x <- seq(0, 1, length = 1025)
}
fx <- cbind(dbeta(x, a,b), pbeta(x, a,b), qbeta(x, a,b))
f <- fx; f[fx == Inf] <- 1e100
matplot(x, f, ylab="", type="l", ylim=ylim, asp=asp,
main = sprintf("[dpq]beta(x, a=%g, b=%g)", a,b))
abline(0,1,     col="gray", lty=3)
abline(h = 0:1, col="gray", lty=3)
legend("top", paste0(c("d","p","q"), "beta(x, a,b)"),
col=1:3, lty=1:3, bty = "n")
invisible(cbind(x, fx))
}
pl.beta()
pl.beta(.5, .5)
pl.beta(.5, 1)
pl.beta(3, 1)
pl.beta(3, 7)
pl.beta(3, 1)
library(kernlab)
data(spam)
set.seed(3435)
trainIndicator  <- rbinom(4601, size = 1, prob = .5)
?rbinom
table(trainIndicator)
trainSpam <- spam[trainIndicator == 1, ]
testSpam <- spam[trainIndicator == 0, ]
names(trainSpam)
table(trianSpam$type)
table(trainSpam$type)
plot(trainSpam$captalAve ~ trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam$capitalAve) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4]+1)
)
plot(log10(trainSpam[, 5:8]+1)
)
hCluster <- hclust(dist(t(trainSpam[, 1:57])))
?t
plot(hCluster)
hClusterUpdated <- hclust(dist(t(log10(trainSpam[, 1:55] +1))))
plot(hClusterUpdated)
?dist
plot(log10(trainSpam[, 1:4]+1))
head(as.numeric(trainSpam$type) - 1)
head(trainSpam$type)
trainSpam$numType <- as.numeric(trainSpam$type) - 1
table(trainSpam$numType)
table(trainSpam$Type)
table(trainSpam$Type)
table(trainSpam$type)
costFunction <- function(x, y) sum(x != (y>0.5))
cvError <- rep(NA, 55)
library(boot)
source('~/Desktop/rep-res/structofdataanal.R')
names(trainSpam)[which.min(cvError)]
summary(cvError)
hist(cvError)
cvError[which.min(cvError)]
?reformulate
typeof(trainSpam$type)
summary(trainSpam$type)
head(trainSpam$type)
trainSpam$type
head(as.numeric(trainSpam$type))
tail(as.numeric(trainSpam$type))
str(trainSpam)
class(trainSpam$type)
typeof(trainSpam$type)
levels(trainSpam$type)
length(cvError)
hist(cvError)
sum(cvError)
dim(trainSpam$type)
dim(trainSpam)
2287 * 55
cvError[which.max(cvError)]
cvError[which.max(cvError)]
rm(list=ls())
x <- do.call(rep("b", 80), paste0())
x <- do.call(paste0(), rep("b", 80))
x <- do.call(paste0(), as.list(rep("b", 80)))
rep("b", 80)
y <- as.list(rep("b", 80))
y
x <- do.call(paste0(), y)
?do.call
x <- do.call(y, paste0())
length(y)
x <- do.call(what = paste0, y)
x
data.frame(1:30)
x <- seq(0, 1, 50)
x
?seq
x <- seq(0, 1, .05)
x
y <- data.frame(x)
y
y$dist <- beta(x, 2, 1)
beta(x)
beta(x, 2)
y$dist <- pbeta(x, 2, 1)
y
plot(y$dist, y$x)
y$dist <- pbeta(x, 3, 1)
plot(y$dist, y$x)
y$surv <- 1-y$dist
plot(y$surv ~ y$x)
plot(y$dist, y$x)
plot(y$x, y$dist)
getwd()
setwd("~/Desktop/rep-res/Assignment1/RepData_PeerAssessment1")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
max_steps_interval
path <- paste0(getwd(), "/", "PA1_template.Rmd")
path
library(knitr)
knit2html(path)
knit2html(path)
?knit2html
output_path <- paste0(getwd(), "/", "PA1_template.md")
knit2html(path, output_path)
knit2html(path, output_path)
knit2html(path, output_path)
output_path <- paste0(getwd(), "/", "test.md")
path <- paste0(getwd(), "/", "test.Rmd")
knit2html(path, output_path)
knit2html(path, output_path)
knit2html(path, output_path)
path <- paste0(getwd(), "/", "PA1_template.Rmd")
output_path <- paste0(getwd(), "/", "PA1_template.md")
path
output_path
knit2html(path, output_path)
